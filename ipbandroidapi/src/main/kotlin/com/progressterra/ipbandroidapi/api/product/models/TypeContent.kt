/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.google.gson.annotations.SerializedName

/**
 * 0 - image - изображение  1 - video - видео  2 - pdf - pdf документ  3 - html - это html страница со своим адресом  4 - htmlString - это форматированный текст html, который хранится в StringData  5 - stringData - строковое значение  6 - voiceData - голосовые данные
 *
 * Values: image,video,pdf,html,htmlString,stringData,voiceData
 */

enum class TypeContent(val value: kotlin.String) {

    @SerializedName(value = "image")
    image("image"),

    @SerializedName(value = "video")
    video("video"),

    @SerializedName(value = "pdf")
    pdf("pdf"),

    @SerializedName(value = "html")
    html("html"),

    @SerializedName(value = "htmlString")
    htmlString("htmlString"),

    @SerializedName(value = "stringData")
    stringData("stringData"),

    @SerializedName(value = "voiceData")
    voiceData("voiceData");

    /**
     * Override toString() to avoid using the enum variable name as the value, and instead use
     * the actual value defined in the API spec file.
     *
     * This solves a problem when the variable name and its value are different, and ensures that
     * the client sends the correct enum values to the server always.
     */
    override fun toString(): String = value

    companion object {
        /**
         * Converts the provided [data] to a [String] on success, null otherwise.
         */
        fun encode(data: kotlin.Any?): kotlin.String? = if (data is TypeContent) "$data" else null

        /**
         * Returns a valid [TypeContent] for [data], null otherwise.
         */
        fun decode(data: kotlin.Any?): TypeContent? = data?.let {
          val normalizedData = "$it".lowercase()
          values().firstOrNull { value ->
            it == value || normalizedData == "$value".lowercase()
          }
        }
    }
}

