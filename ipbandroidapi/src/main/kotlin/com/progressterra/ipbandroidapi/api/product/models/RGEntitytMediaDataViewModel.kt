/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ListInfoImage
import org.openapitools.client.models.TypeContent

import com.google.gson.annotations.SerializedName

/**
 * 
 *
 * @param idEntity Идентфикатор сущности к которой мы добавляем данные, может быть клиентом, организацией, магазином, продуктом
 * @param entityTypeName Имя типа сущности для которой добавляем данные. Как они идут в IPB
 * @param privateForClientID Если данный параметр установлен в идентификатор клиента, то данные доступны только данному клиенту. Данные также доступны бизнес пользователям организации, а также специалистам платформы
 * @param urlData Ссылка на html документ или ссылка на файл
 * @param stringData Используется для StaticData
 * @param dataJSON 
 * @param alias Псевдоним данных. Может использоваться как заголок для данных
 * @param previewText Используется чтобы рассказать о данных
 * @param order Порядок вывода файла в списке
 * @param tag Tag, который позволяет сортировать данные для конкртеной сущности
 * @param contentType 
 * @param propertySize 
 * @param idUnique Уникальный идентификатор
 * @param idEnterprise Идентификатор организации, которой принадлежит данная запись
 * @param dateAdded Дата добавления записи
 * @param dateUpdated Дата обновления записи
 * @param dateSoftRemoved Если дата установлена, то сущность помечена на удаление. Физически данные не удаляются  Функции Delete лишь помечают сущность на удаление устанавливая дату вызова метода
 * @param listInfoImage 
 */


data class RGEntitytMediaDataViewModel (

    /* Идентфикатор сущности к которой мы добавляем данные, может быть клиентом, организацией, магазином, продуктом */
    @SerializedName("idEntity")
    val idEntity: java.util.UUID? = null,

    /* Имя типа сущности для которой добавляем данные. Как они идут в IPB */
    @SerializedName("entityTypeName")
    val entityTypeName: kotlin.String? = null,

    /* Если данный параметр установлен в идентификатор клиента, то данные доступны только данному клиенту. Данные также доступны бизнес пользователям организации, а также специалистам платформы */
    @SerializedName("privateForClientID")
    val privateForClientID: java.util.UUID? = null,

    /* Ссылка на html документ или ссылка на файл */
    @SerializedName("urlData")
    val urlData: kotlin.String? = null,

    /* Используется для StaticData */
    @SerializedName("stringData")
    val stringData: kotlin.String? = null,

    @SerializedName("dataJSON")
    val dataJSON: kotlin.String? = null,

    /* Псевдоним данных. Может использоваться как заголок для данных */
    @SerializedName("alias")
    val alias: kotlin.String? = null,

    /* Используется чтобы рассказать о данных */
    @SerializedName("previewText")
    val previewText: kotlin.String? = null,

    /* Порядок вывода файла в списке */
    @SerializedName("order")
    val order: kotlin.Int? = null,

    /* Tag, который позволяет сортировать данные для конкртеной сущности */
    @SerializedName("tag")
    val tag: kotlin.Int? = null,

    @SerializedName("contentType")
    val contentType: TypeContent? = null,

    @SerializedName("size")
    val propertySize: kotlin.Long? = null,

    /* Уникальный идентификатор */
    @SerializedName("idUnique")
    val idUnique: java.util.UUID? = null,

    /* Идентификатор организации, которой принадлежит данная запись */
    @SerializedName("idEnterprise")
    val idEnterprise: java.util.UUID? = null,

    /* Дата добавления записи */
    @SerializedName("dateAdded")
    val dateAdded: kotlin.String? = null,

    /* Дата обновления записи */
    @SerializedName("dateUpdated")
    val dateUpdated: kotlin.String? = null,

    /* Если дата установлена, то сущность помечена на удаление. Физически данные не удаляются  Функции Delete лишь помечают сущность на удаление устанавливая дату вызова метода */
    @SerializedName("dateSoftRemoved")
    val dateSoftRemoved: kotlin.String? = null,

    @SerializedName("listInfoImage")
    val listInfoImage: ListInfoImage? = null

)

